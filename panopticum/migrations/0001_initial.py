# Generated by Django 2.1.15 on 2020-03-16 07:46

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import panopticum.fields
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dn', models.CharField(max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=64, null=True)),
                ('photo', models.ImageField(upload_to='avatars')),
                ('office_phone', models.CharField(blank=True, max_length=64, null=True)),
                ('mobile_phone', models.CharField(blank=True, max_length=64, null=True)),
                ('active_directory_guid', models.CharField(blank=True, max_length=64, null=True)),
                ('employee_number', models.CharField(blank=True, max_length=64, null=True)),
                ('info', models.TextField(blank=True, null=True)),
                ('hidden', models.BooleanField(db_index=True, default=False, help_text='Hide the person from the potential assignee lists')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ComponentCategoryModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Platform, Search engine, ...', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(help_text='sorting order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ComponentDataPrivacyClassModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Data Access, Secrets Management, Sensitive Metadata, Non-sensitive Metadata', max_length=64)),
                ('order', models.IntegerField(help_text='sorting order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ComponentDependencyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('sync_rw', 'Sync R/W'), ('sync_ro', 'Sync R/O'), ('sync_wo', 'Sync W/O'), ('async_rw', 'Async R/W'), ('async_ro', 'Async R/O'), ('async_wo', 'Async W/O'), ('includes', 'Includes')], default='sync_rw', max_length=16)),
                ('notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ComponentDeploymentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Component deployment name: Cloud Account Server', max_length=64, verbose_name='Deployment name')),
                ('service_name', models.CharField(blank=True, help_text='accsrv, taskmngr', max_length=64)),
                ('binary_name', models.CharField(blank=True, help_text='accsrv.exe', max_length=64)),
                ('notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComponentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Component short name', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('life_status', models.CharField(choices=[('unknown', '?'), ('new', 'New'), ('mature', 'Mature'), ('legacy', 'Legacy'), ('eol', 'End Of Life'), ('eos', 'End Of Support')], default='unknown', max_length=16)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentCategoryModel')),
                ('data_privacy_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentDataPrivacyClassModel')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComponentRuntimeTypeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Library, Framework, Driver, OS Service, OS Process, Web Service, Database, MQ', max_length=64)),
                ('order', models.IntegerField(help_text='sorting order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ComponentSubcategoryModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Platform, Search engine, ...', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentCategoryModel')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComponentVersionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(help_text='note: component version instance will be cloned if you change version!', max_length=64, verbose_name='Version or build')),
                ('comments', models.TextField(blank=True, null=True)),
                ('dev_raml', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_repo', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_public_repo', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_jira_component', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_build_jenkins_job', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_docs', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_public_docs', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_commit_link', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_api_is_public', panopticum.fields.NoPartialYesField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('no', 'No'), ('partial', 'Partial'), ('yes', 'Yes')], default='unknown', max_length=16, verbose_name='')),
                ('qa_applicable', models.BooleanField(default=True, verbose_name='Tests requirements are applicable')),
                ('qa_manual_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_manual_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_unit_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_unit_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_e2e_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_e2e_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_perf_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_perf_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_longhaul_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_longhaul_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_security_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_security_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_api_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_api_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_anonymisation_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', max_length=16, verbose_name='')),
                ('qa_anonymisation_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_upgrade_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Functional, performance, real volume', max_length=16, verbose_name='')),
                ('qa_upgrade_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('update_date', models.DateTimeField(auto_now=True, db_index=True)),
                ('deleted', models.BooleanField(default=False)),
                ('meta_compliance_rating', models.IntegerField(default=0)),
                ('meta_mt_rating', models.IntegerField(default=0)),
                ('meta_op_rating', models.IntegerField(default=0)),
                ('meta_qa_rating', models.IntegerField(default=0)),
                ('meta_rating', models.IntegerField(default=0)),
                ('meta_profile_completeness', models.IntegerField(default=0)),
                ('meta_profile_not_filled_fields', models.TextField(default='')),
                ('meta_bad_rating_fields', models.TextField(default='')),
                ('meta_searchstr_locations', models.TextField(blank=True)),
                ('meta_searchstr_product_versions', models.TextField(blank=True)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='component_version', to='panopticum.ComponentModel')),
                ('depends_on', models.ManyToManyField(related_name='dependee', through='panopticum.ComponentDependencyModel', to='panopticum.ComponentModel')),
            ],
            options={
                'ordering': ['-version'],
            },
        ),
        migrations.CreateModel(
            name='CountryModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DatabaseVendorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Database vendor: MSSQl, Oracle, SQLite, PostgreSQL, MySQL, Percona', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DatacenterModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Datacenter name', max_length=64)),
                ('info', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('grafana', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('metrics', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('components_deployments', models.ManyToManyField(to='panopticum.ComponentDeploymentModel')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeploymentEnvironmentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='K8S, Windows VM, Linux VM,...', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeploymentLocationClassModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='global, per-datacenter, customer, endpoint', max_length=128)),
                ('shortname', models.CharField(help_text='most useful by automation tools like data importer/exporter', max_length=64, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(help_text='sorting order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='FrameworkModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Framework', max_length=64)),
            ],
            options={
                'verbose_name': 'Framework',
                'verbose_name_plural': 'Frameworks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalComponentVersionModel',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.CharField(help_text='note: component version instance will be cloned if you change version!', max_length=64, verbose_name='Version or build')),
                ('comments', models.TextField(blank=True, null=True)),
                ('dev_raml', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_repo', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_public_repo', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_jira_component', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_build_jenkins_job', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_docs', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_public_docs', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_commit_link', panopticum.fields.SmartTextField(blank=True, default='', help_text='Multiple links allowed', verbose_name='')),
                ('dev_api_is_public', panopticum.fields.NoPartialYesField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('no', 'No'), ('partial', 'Partial'), ('yes', 'Yes')], default='unknown', max_length=16, verbose_name='')),
                ('qa_applicable', models.BooleanField(default=True, verbose_name='Tests requirements are applicable')),
                ('qa_manual_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_manual_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_unit_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_unit_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_e2e_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_e2e_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_perf_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_perf_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_longhaul_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_longhaul_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_security_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_security_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_api_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Completeness, coverage, quality', max_length=16, verbose_name='')),
                ('qa_api_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_anonymisation_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', max_length=16, verbose_name='')),
                ('qa_anonymisation_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('qa_upgrade_tests_status', panopticum.fields.LowMedHighField(choices=[('unknown', '?'), ('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('med', 'Med'), ('high', 'High')], default='unknown', help_text='Functional, performance, real volume', max_length=16, verbose_name='')),
                ('qa_upgrade_tests_notes', panopticum.fields.SmartTextField(blank=True, default='', verbose_name='')),
                ('update_date', models.DateTimeField(blank=True, db_index=True, editable=False)),
                ('deleted', models.BooleanField(default=False)),
                ('meta_compliance_rating', models.IntegerField(default=0)),
                ('meta_mt_rating', models.IntegerField(default=0)),
                ('meta_op_rating', models.IntegerField(default=0)),
                ('meta_qa_rating', models.IntegerField(default=0)),
                ('meta_rating', models.IntegerField(default=0)),
                ('meta_profile_completeness', models.IntegerField(default=0)),
                ('meta_profile_not_filled_fields', models.TextField(default='')),
                ('meta_bad_rating_fields', models.TextField(default='')),
                ('meta_searchstr_locations', models.TextField(blank=True)),
                ('meta_searchstr_product_versions', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('component', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='panopticum.ComponentModel')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner_maintainer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner_responsible_qa', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('qa_anonymisation_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_api_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_e2e_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_longhaul_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_manual_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_perf_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_security_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_unit_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
                ('qa_upgrade_tests_signoff', panopticum.fields.SigneeField(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='')),
            ],
            options={
                'verbose_name': 'historical component version model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRequirementStatusEntry',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('notes', models.TextField(blank=True, max_length=16384, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('component_version', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='panopticum.ComponentVersionModel')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical requirement status entry',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='LoggerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Logger model', max_length=64)),
            ],
            options={
                'verbose_name': 'Logger',
                'verbose_name_plural': 'Loggers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OrgDepartmentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ORMModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='ORM', max_length=64)),
            ],
            options={
                'verbose_name': 'Object-Relational Mapping',
                'verbose_name_plural': 'Object-Relational Mappings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PersonRoleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductFamilyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product family', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductVersionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortname', models.CharField(help_text='Product version short name', max_length=64)),
                ('name', models.CharField(help_text='Product version full name', max_length=64)),
                ('order', models.IntegerField(help_text='sorting order')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ProductFamilyModel')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ProgrammingLanguageModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Programming language', max_length=64)),
            ],
            options={
                'verbose_name': 'Programming language',
                'verbose_name_plural': 'Programming language',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, unique=True)),
                ('description', models.TextField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='RequirementSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('owner_groups', models.ManyToManyField(blank=True, related_name='owner_groups', to='auth.Group')),
                ('requirements', models.ManyToManyField(related_name='sets', to='panopticum.Requirement')),
            ],
        ),
        migrations.CreateModel(
            name='RequirementStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RequirementStatusEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, max_length=16384, null=True)),
                ('component_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='panopticum.ComponentVersionModel')),
                ('requirement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='panopticum.Requirement')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='panopticum.RequirementStatus')),
            ],
            options={
                'permissions': [('change_owner_status', 'Can change component owner status'), ('change_signee_status', 'Can change signee status')],
            },
        ),
        migrations.CreateModel(
            name='RequirementStatusType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.CharField(max_length=24)),
            ],
        ),
        migrations.CreateModel(
            name='SoftwareVendorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Component vendor: OpenSource, MyCompany, ...', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TCPPortModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='TCP/IP port name: HTTP, SSH, ...', max_length=64)),
                ('port', models.IntegerField(help_text='TCP/IP port: 80, 21, ...')),
            ],
            options={
                'ordering': ['port'],
            },
        ),
        migrations.AddField(
            model_name='requirementstatusentry',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='panopticum.RequirementStatusType'),
        ),
        migrations.AddField(
            model_name='requirementstatus',
            name='allow_for',
            field=models.ManyToManyField(to='panopticum.RequirementStatusType'),
        ),
        migrations.AddField(
            model_name='ormmodel',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ProgrammingLanguageModel'),
        ),
        migrations.AddField(
            model_name='historicalrequirementstatusentry',
            name='requirement',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='panopticum.Requirement'),
        ),
        migrations.AddField(
            model_name='historicalrequirementstatusentry',
            name='status',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='panopticum.RequirementStatus'),
        ),
        migrations.AddField(
            model_name='historicalrequirementstatusentry',
            name='type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='panopticum.RequirementStatusType'),
        ),
        migrations.AddField(
            model_name='frameworkmodel',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ProgrammingLanguageModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_database',
            field=models.ManyToManyField(blank=True, to='panopticum.DatabaseVendorModel', verbose_name='Supported Databases'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_framework',
            field=models.ManyToManyField(blank=True, to='panopticum.FrameworkModel', verbose_name='Frameworks'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_language',
            field=models.ManyToManyField(blank=True, to='panopticum.ProgrammingLanguageModel', verbose_name='Language'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_logging',
            field=models.ManyToManyField(blank=True, to='panopticum.LoggerModel', verbose_name='Logging framework'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_orm',
            field=models.ManyToManyField(blank=True, to='panopticum.ORMModel', verbose_name='ORM'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='meta_locations',
            field=models.ManyToManyField(blank=True, help_text='cached component deployment locations', related_name='component_versions', to='panopticum.DeploymentLocationClassModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='meta_product_versions',
            field=models.ManyToManyField(blank=True, help_text='cached product versions', related_name='component_versions', to='panopticum.ProductVersionModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_architect',
            field=models.ManyToManyField(blank=True, related_name='architect_of', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_escalation_list',
            field=models.ManyToManyField(blank=True, related_name='escalation_list_of', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_expert',
            field=models.ManyToManyField(blank=True, related_name='expert_of', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_maintainer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='maintainer_of', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_product_manager',
            field=models.ManyToManyField(blank=True, related_name='product_manager_of', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_program_manager',
            field=models.ManyToManyField(blank=True, related_name='program_managed_of', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_responsible_qa',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='responsible_qa_of', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_anonymisation_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_anonymisation_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_api_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_api_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_e2e_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_e2e_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_longhaul_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_longhaul_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_manual_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_manual_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_perf_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_perf_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_security_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_security_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_unit_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_unit_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_upgrade_tests_signoff',
            field=panopticum.fields.SigneeField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_upgrade_tests', to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='runtime_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentRuntimeTypeModel'),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='subcategory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentSubcategoryModel'),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.SoftwareVendorModel'),
        ),
        migrations.AddField(
            model_name='componentdeploymentmodel',
            name='component_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='panopticum.ComponentVersionModel'),
        ),
        migrations.AddField(
            model_name='componentdeploymentmodel',
            name='environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='panopticum.DeploymentEnvironmentModel'),
        ),
        migrations.AddField(
            model_name='componentdeploymentmodel',
            name='location_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='panopticum.DeploymentLocationClassModel'),
        ),
        migrations.AddField(
            model_name='componentdeploymentmodel',
            name='open_ports',
            field=models.ManyToManyField(blank=True, to='panopticum.TCPPortModel'),
        ),
        migrations.AddField(
            model_name='componentdeploymentmodel',
            name='product_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='panopticum.ProductVersionModel'),
        ),
        migrations.AddField(
            model_name='componentdependencymodel',
            name='component',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentModel'),
        ),
        migrations.AddField(
            model_name='componentdependencymodel',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentVersionModel'),
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='panopticum.OrgDepartmentModel'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='panopticum.OrganizationModel'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='panopticum.PersonRoleModel'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='requirementstatusentry',
            unique_together={('status', 'type', 'component_version', 'requirement')},
        ),
    ]
